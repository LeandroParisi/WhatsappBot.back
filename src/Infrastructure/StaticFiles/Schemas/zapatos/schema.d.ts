/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.2), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */

  export type enum_coupons_discount_type = 'absolute_value' | 'percentage';
  export namespace every {
    export type enum_coupons_discount_type = ['absolute_value', 'percentage'];
  }

  /* --- tables --- */

  /**
   * **branches**
   * - Table in database
   */
  export namespace branches {
    export type Table = 'branches';
    export interface Selectable {
      /**
      * **branches.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **branches.userid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      userid: string;
      /**
      * **branches.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber: string;
      /**
      * **branches.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid: string | null;
      /**
      * **branches.managername**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      managername: string;
      /**
      * **branches.branchname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      branchname: string;
      /**
      * **branches.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number;
      /**
      * **branches.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number;
      /**
      * **branches.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid: number;
      /**
      * **branches.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood: string;
      /**
      * **branches.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street: string;
      /**
      * **branches.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber: string;
      /**
      * **branches.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement: string;
      /**
      * **branches.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode: string;
      /**
      * **branches.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat: number;
      /**
      * **branches.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng: number;
      /**
      * **branches.deliveryfees**
      * - `deliveryFeesJsonb` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      deliveryfees: c.PgDeliveryFeesJsonb;
      /**
      * **branches.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **branches.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **branches.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **branches.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **branches.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **branches.userid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      userid: string;
      /**
      * **branches.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber: string;
      /**
      * **branches.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid: string | null;
      /**
      * **branches.managername**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      managername: string;
      /**
      * **branches.branchname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      branchname: string;
      /**
      * **branches.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number;
      /**
      * **branches.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number;
      /**
      * **branches.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid: number;
      /**
      * **branches.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood: string;
      /**
      * **branches.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street: string;
      /**
      * **branches.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber: string;
      /**
      * **branches.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement: string;
      /**
      * **branches.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode: string;
      /**
      * **branches.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat: number;
      /**
      * **branches.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng: number;
      /**
      * **branches.deliveryfees**
      * - `deliveryFeesJsonb` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      deliveryfees: c.PgDeliveryFeesJsonb;
      /**
      * **branches.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **branches.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **branches.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **branches.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **branches.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.userid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      userid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.managername**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      managername?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.branchname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      branchname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.deliveryfees**
      * - `deliveryFeesJsonb` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      deliveryfees?: c.PgDeliveryFeesJsonb | db.Parameter<c.PgDeliveryFeesJsonb> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgDeliveryFeesJsonb | db.Parameter<c.PgDeliveryFeesJsonb> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **branches.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.userid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      userid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **branches.managername**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      managername: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.branchname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      branchname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **branches.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **branches.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **branches.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **branches.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **branches.deliveryfees**
      * - `deliveryFeesJsonb` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      deliveryfees: c.PgDeliveryFeesJsonb | db.Parameter<c.PgDeliveryFeesJsonb> | db.SQLFragment;
      /**
      * **branches.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **branches.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **branches.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **branches.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **branches.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.userid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      userid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **branches.managername**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      managername?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.branchname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      branchname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **branches.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **branches.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **branches.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **branches.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **branches.deliveryfees**
      * - `deliveryFeesJsonb` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      deliveryfees?: c.PgDeliveryFeesJsonb | db.Parameter<c.PgDeliveryFeesJsonb> | db.SQLFragment | db.SQLFragment<any, c.PgDeliveryFeesJsonb | db.Parameter<c.PgDeliveryFeesJsonb> | db.SQLFragment>;
      /**
      * **branches.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **branches.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **branches.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **branches.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'branches_pkey' | 'branches_whatsapp_id_key' | 'branches_whatsapp_number_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **branches_delivery_types**
   * - Table in database
   */
  export namespace branches_delivery_types {
    export type Table = 'branches_delivery_types';
    export interface Selectable {
      /**
      * **branches_delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_delivery_types_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_delivery_types.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_delivery_types.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid: number;
    }
    export interface JSONSelectable {
      /**
      * **branches_delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_delivery_types_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_delivery_types.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_delivery_types.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid: number;
    }
    export interface Whereable {
      /**
      * **branches_delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_delivery_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_delivery_types.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_delivery_types.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **branches_delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_delivery_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **branches_delivery_types.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches_delivery_types.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **branches_delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_delivery_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **branches_delivery_types.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches_delivery_types.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'branches_delivery_types_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **branches_menus**
   * - Table in database
   */
  export namespace branches_menus {
    export type Table = 'branches_menus';
    export interface Selectable {
      /**
      * **branches_menus.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_menus_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_menus.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_menus.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid: string;
    }
    export interface JSONSelectable {
      /**
      * **branches_menus.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_menus_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_menus.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_menus.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid: string;
    }
    export interface Whereable {
      /**
      * **branches_menus.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_menus_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_menus.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_menus.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **branches_menus.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_menus_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **branches_menus.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches_menus.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **branches_menus.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_menus_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **branches_menus.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches_menus.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'branches_menus_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **branches_payment_methods**
   * - Table in database
   */
  export namespace branches_payment_methods {
    export type Table = 'branches_payment_methods';
    export interface Selectable {
      /**
      * **branches_payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_payment_methods_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_payment_methods.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_payment_methods.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid: number;
    }
    export interface JSONSelectable {
      /**
      * **branches_payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_payment_methods_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_payment_methods.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_payment_methods.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid: number;
    }
    export interface Whereable {
      /**
      * **branches_payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_payment_methods_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_payment_methods.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_payment_methods.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **branches_payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_payment_methods_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **branches_payment_methods.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches_payment_methods.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **branches_payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_payment_methods_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **branches_payment_methods.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches_payment_methods.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'branches_payment_methods_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **branches_products**
   * - Table in database
   */
  export namespace branches_products {
    export type Table = 'branches_products';
    export interface Selectable {
      /**
      * **branches_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_products.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
    }
    export interface JSONSelectable {
      /**
      * **branches_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_products.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
    }
    export interface Whereable {
      /**
      * **branches_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_products.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **branches_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **branches_products.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **branches_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **branches_products.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'branches_products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **branches_promotions**
   * - Table in database
   */
  export namespace branches_promotions {
    export type Table = 'branches_promotions';
    export interface Selectable {
      /**
      * **branches_promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_promotions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_promotions.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_promotions.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid: number;
    }
    export interface JSONSelectable {
      /**
      * **branches_promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_promotions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **branches_promotions.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **branches_promotions.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid: number;
    }
    export interface Whereable {
      /**
      * **branches_promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_promotions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_promotions.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **branches_promotions.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **branches_promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_promotions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **branches_promotions.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **branches_promotions.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **branches_promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('branches_promotions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **branches_promotions.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **branches_promotions.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'branches_promotions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **categories**
   * - Table in database
   */
  export namespace categories {
    export type Table = 'categories';
    export interface Selectable {
      /**
      * **categories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('categories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **categories.categoryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      categoryname: string;
    }
    export interface JSONSelectable {
      /**
      * **categories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('categories_id_seq'::regclass)`
      */
      id: number;
      /**
      * **categories.categoryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      categoryname: string;
    }
    export interface Whereable {
      /**
      * **categories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('categories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **categories.categoryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      categoryname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **categories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('categories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **categories.categoryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      categoryname: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **categories.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('categories_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **categories.categoryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      categoryname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'categories_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **cities**
   * - Table in database
   */
  export namespace cities {
    export type Table = 'cities';
    export interface Selectable {
      /**
      * **cities.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('cities_id_seq'::regclass)`
      */
      id: number;
      /**
      * **cities.cityname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cityname: string;
      /**
      * **cities.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number;
    }
    export interface JSONSelectable {
      /**
      * **cities.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('cities_id_seq'::regclass)`
      */
      id: number;
      /**
      * **cities.cityname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cityname: string;
      /**
      * **cities.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number;
    }
    export interface Whereable {
      /**
      * **cities.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('cities_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cities.cityname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cityname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **cities.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **cities.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('cities_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **cities.cityname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cityname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **cities.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **cities.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('cities_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **cities.cityname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cityname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **cities.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'cities_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **conditions**
   * - Table in database
   */
  export namespace conditions {
    export type Table = 'conditions';
    export interface Selectable {
      /**
      * **conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('conditions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **conditions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('conditions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **conditions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('conditions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **conditions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('conditions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **conditions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('conditions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **conditions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'conditions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **countries**
   * - Table in database
   */
  export namespace countries {
    export type Table = 'countries';
    export interface Selectable {
      /**
      * **countries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('countries_id_seq'::regclass)`
      */
      id: number;
      /**
      * **countries.countryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      countryname: string;
    }
    export interface JSONSelectable {
      /**
      * **countries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('countries_id_seq'::regclass)`
      */
      id: number;
      /**
      * **countries.countryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      countryname: string;
    }
    export interface Whereable {
      /**
      * **countries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('countries_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **countries.countryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      countryname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **countries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('countries_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **countries.countryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      countryname: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **countries.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('countries_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **countries.countryname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      countryname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'countries_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **coupons**
   * - Table in database
   */
  export namespace coupons {
    export type Table = 'coupons';
    export interface Selectable {
      /**
      * **coupons.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_id_seq'::regclass)`
      */
      id: number;
      /**
      * **coupons.coupomcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      coupomcode: string;
      /**
      * **coupons.discounttype**
      * - `enum_coupons_discount_type` in database
      * - `NOT NULL`, no default
      */
      discounttype: enum_coupons_discount_type;
      /**
      * **coupons.discount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      discount: number;
      /**
      * **coupons.used**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      used: number | null;
      /**
      * **coupons.pricelimit**
      * - `numeric` in database
      * - Nullable, no default
      */
      pricelimit: number | null;
      /**
      * **coupons.datelimit**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      datelimit: Date | null;
      /**
      * **coupons.distancelimitinkm**
      * - `int4` in database
      * - Nullable, no default
      */
      distancelimitinkm: number | null;
      /**
      * **coupons.useslimit**
      * - `int4` in database
      * - Nullable, no default
      */
      useslimit: number | null;
      /**
      * **coupons.freedelivery**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      freedelivery: boolean;
      /**
      * **coupons.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **coupons.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **coupons.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **coupons.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_id_seq'::regclass)`
      */
      id: number;
      /**
      * **coupons.coupomcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      coupomcode: string;
      /**
      * **coupons.discounttype**
      * - `enum_coupons_discount_type` in database
      * - `NOT NULL`, no default
      */
      discounttype: enum_coupons_discount_type;
      /**
      * **coupons.discount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      discount: number;
      /**
      * **coupons.used**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      used: number | null;
      /**
      * **coupons.pricelimit**
      * - `numeric` in database
      * - Nullable, no default
      */
      pricelimit: number | null;
      /**
      * **coupons.datelimit**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      datelimit: db.TimestampTzString | null;
      /**
      * **coupons.distancelimitinkm**
      * - `int4` in database
      * - Nullable, no default
      */
      distancelimitinkm: number | null;
      /**
      * **coupons.useslimit**
      * - `int4` in database
      * - Nullable, no default
      */
      useslimit: number | null;
      /**
      * **coupons.freedelivery**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      freedelivery: boolean;
      /**
      * **coupons.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **coupons.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **coupons.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **coupons.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.coupomcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      coupomcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.discounttype**
      * - `enum_coupons_discount_type` in database
      * - `NOT NULL`, no default
      */
      discounttype?: enum_coupons_discount_type | db.Parameter<enum_coupons_discount_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, enum_coupons_discount_type | db.Parameter<enum_coupons_discount_type> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.discount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      discount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.used**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      used?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.pricelimit**
      * - `numeric` in database
      * - Nullable, no default
      */
      pricelimit?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.datelimit**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      datelimit?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.distancelimitinkm**
      * - `int4` in database
      * - Nullable, no default
      */
      distancelimitinkm?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.useslimit**
      * - `int4` in database
      * - Nullable, no default
      */
      useslimit?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.freedelivery**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      freedelivery?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **coupons.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.coupomcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      coupomcode: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **coupons.discounttype**
      * - `enum_coupons_discount_type` in database
      * - `NOT NULL`, no default
      */
      discounttype: enum_coupons_discount_type | db.Parameter<enum_coupons_discount_type> | db.SQLFragment;
      /**
      * **coupons.discount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      discount: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **coupons.used**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      used?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.pricelimit**
      * - `numeric` in database
      * - Nullable, no default
      */
      pricelimit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.datelimit**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      datelimit?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.distancelimitinkm**
      * - `int4` in database
      * - Nullable, no default
      */
      distancelimitinkm?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.useslimit**
      * - `int4` in database
      * - Nullable, no default
      */
      useslimit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.freedelivery**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      freedelivery?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **coupons.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **coupons.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.coupomcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      coupomcode?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **coupons.discounttype**
      * - `enum_coupons_discount_type` in database
      * - `NOT NULL`, no default
      */
      discounttype?: enum_coupons_discount_type | db.Parameter<enum_coupons_discount_type> | db.SQLFragment | db.SQLFragment<any, enum_coupons_discount_type | db.Parameter<enum_coupons_discount_type> | db.SQLFragment>;
      /**
      * **coupons.discount**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      discount?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **coupons.used**
      * - `int4` in database
      * - Nullable, default: `0`
      */
      used?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.pricelimit**
      * - `numeric` in database
      * - Nullable, no default
      */
      pricelimit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.datelimit**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      datelimit?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.distancelimitinkm**
      * - `int4` in database
      * - Nullable, no default
      */
      distancelimitinkm?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.useslimit**
      * - `int4` in database
      * - Nullable, no default
      */
      useslimit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.freedelivery**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      freedelivery?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'coupons_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **coupons_branches**
   * - Table in database
   */
  export namespace coupons_branches {
    export type Table = 'coupons_branches';
    export interface Selectable {
      /**
      * **coupons_branches.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_branches_id_seq'::regclass)`
      */
      id: number;
      /**
      * **coupons_branches.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid: number;
      /**
      * **coupons_branches.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
    }
    export interface JSONSelectable {
      /**
      * **coupons_branches.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_branches_id_seq'::regclass)`
      */
      id: number;
      /**
      * **coupons_branches.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid: number;
      /**
      * **coupons_branches.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
    }
    export interface Whereable {
      /**
      * **coupons_branches.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_branches_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons_branches.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons_branches.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **coupons_branches.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_branches_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **coupons_branches.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **coupons_branches.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **coupons_branches.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_branches_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons_branches.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **coupons_branches.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'coupons_branches_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **coupons_conditions**
   * - Table in database
   */
  export namespace coupons_conditions {
    export type Table = 'coupons_conditions';
    export interface Selectable {
      /**
      * **coupons_conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_conditions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **coupons_conditions.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid: number;
      /**
      * **coupons_conditions.conditionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conditionid: number;
    }
    export interface JSONSelectable {
      /**
      * **coupons_conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_conditions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **coupons_conditions.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid: number;
      /**
      * **coupons_conditions.conditionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conditionid: number;
    }
    export interface Whereable {
      /**
      * **coupons_conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_conditions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons_conditions.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **coupons_conditions.conditionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conditionid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **coupons_conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_conditions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **coupons_conditions.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **coupons_conditions.conditionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conditionid: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **coupons_conditions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('coupons_conditions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **coupons_conditions.coupomid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      coupomid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **coupons_conditions.conditionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      conditionid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'coupons_conditions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **customer_addresses**
   * - Table in database
   */
  export namespace customer_addresses {
    export type Table = 'customer_addresses';
    export interface Selectable {
      /**
      * **customer_addresses.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **customer_addresses.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid: string;
      /**
      * **customer_addresses.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number;
      /**
      * **customer_addresses.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number;
      /**
      * **customer_addresses.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid: number;
      /**
      * **customer_addresses.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood: string;
      /**
      * **customer_addresses.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street: string;
      /**
      * **customer_addresses.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber: string;
      /**
      * **customer_addresses.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement: string;
      /**
      * **customer_addresses.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode: string;
      /**
      * **customer_addresses.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat: number;
      /**
      * **customer_addresses.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng: number;
      /**
      * **customer_addresses.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **customer_addresses.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **customer_addresses.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **customer_addresses.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **customer_addresses.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid: string;
      /**
      * **customer_addresses.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number;
      /**
      * **customer_addresses.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number;
      /**
      * **customer_addresses.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid: number;
      /**
      * **customer_addresses.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood: string;
      /**
      * **customer_addresses.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street: string;
      /**
      * **customer_addresses.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber: string;
      /**
      * **customer_addresses.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement: string;
      /**
      * **customer_addresses.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode: string;
      /**
      * **customer_addresses.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat: number;
      /**
      * **customer_addresses.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng: number;
      /**
      * **customer_addresses.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **customer_addresses.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **customer_addresses.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **customer_addresses.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customer_addresses.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **customer_addresses.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **customer_addresses.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **customer_addresses.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **customer_addresses.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customer_addresses.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **customer_addresses.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **customer_addresses.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **customer_addresses.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customer_addresses.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **customer_addresses.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **customer_addresses.stateid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      stateid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **customer_addresses.cityid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      cityid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **customer_addresses.neighborhood**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      neighborhood?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.street**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      street?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.streetnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetnumber?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.streetcomplement**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      streetcomplement?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.postalcode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      postalcode?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customer_addresses.lat**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lat?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **customer_addresses.lng**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      lng?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **customer_addresses.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **customer_addresses.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customer_addresses.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'customer_addresses_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **customers**
   * - Table in database
   */
  export namespace customers {
    export type Table = 'customers';
    export interface Selectable {
      /**
      * **customers.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **customers.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber: string;
      /**
      * **customers.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid: string | null;
      /**
      * **customers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **customers.firstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      firstname: string;
      /**
      * **customers.middlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      middlename: string | null;
      /**
      * **customers.lastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lastname: string;
      /**
      * **customers.cpf**
      * - `varchar` in database
      * - Nullable, no default
      */
      cpf: string | null;
      /**
      * **customers.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **customers.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **customers.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **customers.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **customers.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber: string;
      /**
      * **customers.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid: string | null;
      /**
      * **customers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **customers.firstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      firstname: string;
      /**
      * **customers.middlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      middlename: string | null;
      /**
      * **customers.lastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lastname: string;
      /**
      * **customers.cpf**
      * - `varchar` in database
      * - Nullable, no default
      */
      cpf: string | null;
      /**
      * **customers.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **customers.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **customers.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **customers.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.firstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      firstname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.middlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      middlename?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.lastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lastname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.cpf**
      * - `varchar` in database
      * - Nullable, no default
      */
      cpf?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **customers.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **customers.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customers.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customers.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customers.firstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      firstname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customers.middlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      middlename?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customers.lastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lastname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **customers.cpf**
      * - `varchar` in database
      * - Nullable, no default
      */
      cpf?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customers.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **customers.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **customers.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **customers.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customers.whatsappnumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      whatsappnumber?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customers.whatsappid**
      * - `varchar` in database
      * - Nullable, no default
      */
      whatsappid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customers.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customers.firstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      firstname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customers.middlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      middlename?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customers.lastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      lastname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **customers.cpf**
      * - `varchar` in database
      * - Nullable, no default
      */
      cpf?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customers.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **customers.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **customers.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'customers_email_key' | 'customers_pkey' | 'customers_whatsapp_id_key' | 'customers_whatsapp_number_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **delivery_types**
   * - Table in database
   */
  export namespace delivery_types {
    export type Table = 'delivery_types';
    export interface Selectable {
      /**
      * **delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('delivery_types_id_seq'::regclass)`
      */
      id: number;
      /**
      * **delivery_types.deliverytype**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      deliverytype: string;
    }
    export interface JSONSelectable {
      /**
      * **delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('delivery_types_id_seq'::regclass)`
      */
      id: number;
      /**
      * **delivery_types.deliverytype**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      deliverytype: string;
    }
    export interface Whereable {
      /**
      * **delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('delivery_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **delivery_types.deliverytype**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      deliverytype?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('delivery_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **delivery_types.deliverytype**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      deliverytype: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **delivery_types.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('delivery_types_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **delivery_types.deliverytype**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      deliverytype?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'delivery_types_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **menus**
   * - Table in database
   */
  export namespace menus {
    export type Table = 'menus';
    export interface Selectable {
      /**
      * **menus.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **menus.menuname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      menuname: string;
      /**
      * **menus.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **menus.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **menus.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **menus.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **menus.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **menus.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **menus.menuname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      menuname: string;
      /**
      * **menus.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **menus.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **menus.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **menus.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **menus.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **menus.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.menuname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      menuname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **menus.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **menus.menuname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      menuname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **menus.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **menus.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **menus.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **menus.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **menus.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **menus.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **menus.menuname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      menuname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **menus.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **menus.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **menus.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **menus.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **menus.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'menus_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **menus_products**
   * - Table in database
   */
  export namespace menus_products {
    export type Table = 'menus_products';
    export interface Selectable {
      /**
      * **menus_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('menus_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **menus_products.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid: string;
      /**
      * **menus_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
    }
    export interface JSONSelectable {
      /**
      * **menus_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('menus_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **menus_products.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid: string;
      /**
      * **menus_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
    }
    export interface Whereable {
      /**
      * **menus_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('menus_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus_products.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **menus_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **menus_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('menus_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **menus_products.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **menus_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **menus_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('menus_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **menus_products.menuid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      menuid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **menus_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'menus_products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **opening_hours**
   * - Table in database
   */
  export namespace opening_hours {
    export type Table = 'opening_hours';
    export interface Selectable {
      /**
      * **opening_hours.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('opening_hours_id_seq'::regclass)`
      */
      id: number;
      /**
      * **opening_hours.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **opening_hours.monday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      monday: c.PgOpeningHours | null;
      /**
      * **opening_hours.tuesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      tuesday: c.PgOpeningHours | null;
      /**
      * **opening_hours.wednesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      wednesday: c.PgOpeningHours | null;
      /**
      * **opening_hours.thursday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      thursday: c.PgOpeningHours | null;
      /**
      * **opening_hours.friday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      friday: c.PgOpeningHours | null;
      /**
      * **opening_hours.saturday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      saturday: c.PgOpeningHours | null;
      /**
      * **opening_hours.sunday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      sunday: c.PgOpeningHours | null;
      /**
      * **opening_hours.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **opening_hours.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **opening_hours.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('opening_hours_id_seq'::regclass)`
      */
      id: number;
      /**
      * **opening_hours.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **opening_hours.monday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      monday: c.PgOpeningHours | null;
      /**
      * **opening_hours.tuesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      tuesday: c.PgOpeningHours | null;
      /**
      * **opening_hours.wednesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      wednesday: c.PgOpeningHours | null;
      /**
      * **opening_hours.thursday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      thursday: c.PgOpeningHours | null;
      /**
      * **opening_hours.friday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      friday: c.PgOpeningHours | null;
      /**
      * **opening_hours.saturday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      saturday: c.PgOpeningHours | null;
      /**
      * **opening_hours.sunday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      sunday: c.PgOpeningHours | null;
      /**
      * **opening_hours.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **opening_hours.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **opening_hours.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('opening_hours_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.monday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      monday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.tuesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      tuesday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.wednesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      wednesday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.thursday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      thursday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.friday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      friday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.saturday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      saturday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.sunday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      sunday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **opening_hours.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **opening_hours.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('opening_hours_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **opening_hours.monday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      monday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.tuesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      tuesday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.wednesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      wednesday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.thursday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      thursday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.friday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      friday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.saturday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      saturday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.sunday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      sunday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **opening_hours.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **opening_hours.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('opening_hours_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **opening_hours.monday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      monday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.tuesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      tuesday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.wednesday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      wednesday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.thursday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      thursday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.friday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      friday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.saturday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      saturday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.sunday**
      * - `openingHours` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      sunday?: c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgOpeningHours | db.Parameter<c.PgOpeningHours> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **opening_hours.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'opening_hours_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **orders**
   * - Table in database
   */
  export namespace orders {
    export type Table = 'orders';
    export interface Selectable {
      /**
      * **orders.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **orders.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **orders.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid: string;
      /**
      * **orders.addressid**
      * - `uuid` in database
      * - Nullable, no default
      */
      addressid: string | null;
      /**
      * **orders.ordernumber**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_ordernumber_seq'::regclass)`
      */
      ordernumber: number;
      /**
      * **orders.subtotal**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      subtotal: number;
      /**
      * **orders.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid: number;
      /**
      * **orders.deliveryfee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      deliveryfee: number;
      /**
      * **orders.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid: number;
      /**
      * **orders.discount**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      discount: number;
      /**
      * **orders.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number;
      /**
      * **orders.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number;
      /**
      * **orders.coupomid**
      * - `int4` in database
      * - Nullable, no default
      */
      coupomid: number | null;
      /**
      * **orders.promotionid**
      * - `int4` in database
      * - Nullable, no default
      */
      promotionid: number | null;
      /**
      * **orders.estimateddeliveryduration**
      * - `numeric` in database
      * - Nullable, no default
      */
      estimateddeliveryduration: number | null;
      /**
      * **orders.distanceinkm**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      distanceinkm: number;
      /**
      * **orders.comments**
      * - `text` in database
      * - Nullable, no default
      */
      comments: string | null;
      /**
      * **orders.dispatchtime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      dispatchtime: Date | null;
      /**
      * **orders.deliverytime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deliverytime: Date | null;
      /**
      * **orders.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **orders.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **orders.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **orders.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string;
      /**
      * **orders.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid: string;
      /**
      * **orders.addressid**
      * - `uuid` in database
      * - Nullable, no default
      */
      addressid: string | null;
      /**
      * **orders.ordernumber**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_ordernumber_seq'::regclass)`
      */
      ordernumber: number;
      /**
      * **orders.subtotal**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      subtotal: number;
      /**
      * **orders.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid: number;
      /**
      * **orders.deliveryfee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      deliveryfee: number;
      /**
      * **orders.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid: number;
      /**
      * **orders.discount**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      discount: number;
      /**
      * **orders.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number;
      /**
      * **orders.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number;
      /**
      * **orders.coupomid**
      * - `int4` in database
      * - Nullable, no default
      */
      coupomid: number | null;
      /**
      * **orders.promotionid**
      * - `int4` in database
      * - Nullable, no default
      */
      promotionid: number | null;
      /**
      * **orders.estimateddeliveryduration**
      * - `numeric` in database
      * - Nullable, no default
      */
      estimateddeliveryduration: number | null;
      /**
      * **orders.distanceinkm**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      distanceinkm: number;
      /**
      * **orders.comments**
      * - `text` in database
      * - Nullable, no default
      */
      comments: string | null;
      /**
      * **orders.dispatchtime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      dispatchtime: db.TimestampTzString | null;
      /**
      * **orders.deliverytime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deliverytime: db.TimestampTzString | null;
      /**
      * **orders.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **orders.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **orders.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.addressid**
      * - `uuid` in database
      * - Nullable, no default
      */
      addressid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.ordernumber**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_ordernumber_seq'::regclass)`
      */
      ordernumber?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.subtotal**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      subtotal?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.deliveryfee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      deliveryfee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.discount**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      discount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.coupomid**
      * - `int4` in database
      * - Nullable, no default
      */
      coupomid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.promotionid**
      * - `int4` in database
      * - Nullable, no default
      */
      promotionid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.estimateddeliveryduration**
      * - `numeric` in database
      * - Nullable, no default
      */
      estimateddeliveryduration?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.distanceinkm**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      distanceinkm?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.comments**
      * - `text` in database
      * - Nullable, no default
      */
      comments?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.dispatchtime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      dispatchtime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.deliverytime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deliverytime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **orders.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **orders.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **orders.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **orders.addressid**
      * - `uuid` in database
      * - Nullable, no default
      */
      addressid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.ordernumber**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_ordernumber_seq'::regclass)`
      */
      ordernumber?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **orders.subtotal**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      subtotal: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders.deliveryfee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      deliveryfee?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **orders.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders.discount**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      discount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **orders.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders.coupomid**
      * - `int4` in database
      * - Nullable, no default
      */
      coupomid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.promotionid**
      * - `int4` in database
      * - Nullable, no default
      */
      promotionid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.estimateddeliveryduration**
      * - `numeric` in database
      * - Nullable, no default
      */
      estimateddeliveryduration?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.distanceinkm**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      distanceinkm: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders.comments**
      * - `text` in database
      * - Nullable, no default
      */
      comments?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.dispatchtime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      dispatchtime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.deliverytime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deliverytime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **orders.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **orders.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **orders.branchid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      branchid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **orders.customerid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      customerid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **orders.addressid**
      * - `uuid` in database
      * - Nullable, no default
      */
      addressid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.ordernumber**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_ordernumber_seq'::regclass)`
      */
      ordernumber?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.subtotal**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      subtotal?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders.deliverytypeid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      deliverytypeid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders.deliveryfee**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      deliveryfee?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.paymentmethodid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      paymentmethodid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders.discount**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      discount?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders.status**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      status?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders.coupomid**
      * - `int4` in database
      * - Nullable, no default
      */
      coupomid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.promotionid**
      * - `int4` in database
      * - Nullable, no default
      */
      promotionid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.estimateddeliveryduration**
      * - `numeric` in database
      * - Nullable, no default
      */
      estimateddeliveryduration?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.distanceinkm**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      distanceinkm?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders.comments**
      * - `text` in database
      * - Nullable, no default
      */
      comments?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.dispatchtime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      dispatchtime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.deliverytime**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deliverytime?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **orders.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'orders_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **orders_products**
   * - Table in database
   */
  export namespace orders_products {
    export type Table = 'orders_products';
    export interface Selectable {
      /**
      * **orders_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **orders_products.orderid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      orderid: string;
      /**
      * **orders_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
      /**
      * **orders_products.quantity**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      quantity: number;
      /**
      * **orders_products.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number;
      /**
      * **orders_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      attributes: c.PgProductAttributes | null;
    }
    export interface JSONSelectable {
      /**
      * **orders_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **orders_products.orderid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      orderid: string;
      /**
      * **orders_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
      /**
      * **orders_products.quantity**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      quantity: number;
      /**
      * **orders_products.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number;
      /**
      * **orders_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      attributes: c.PgProductAttributes | null;
    }
    export interface Whereable {
      /**
      * **orders_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders_products.orderid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      orderid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders_products.quantity**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      quantity?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders_products.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **orders_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      attributes?: c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **orders_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **orders_products.orderid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      orderid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **orders_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **orders_products.quantity**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      quantity?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **orders_products.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **orders_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      attributes?: c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **orders_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('orders_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **orders_products.orderid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      orderid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **orders_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **orders_products.quantity**
      * - `int4` in database
      * - `NOT NULL`, default: `1`
      */
      quantity?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **orders_products.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **orders_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - Nullable, no default
      */
      attributes?: c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'orders_products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **payment_methods**
   * - Table in database
   */
  export namespace payment_methods {
    export type Table = 'payment_methods';
    export interface Selectable {
      /**
      * **payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('payment_methods_id_seq'::regclass)`
      */
      id: number;
      /**
      * **payment_methods.paymentmethod**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      paymentmethod: string;
    }
    export interface JSONSelectable {
      /**
      * **payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('payment_methods_id_seq'::regclass)`
      */
      id: number;
      /**
      * **payment_methods.paymentmethod**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      paymentmethod: string;
    }
    export interface Whereable {
      /**
      * **payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('payment_methods_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **payment_methods.paymentmethod**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      paymentmethod?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('payment_methods_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **payment_methods.paymentmethod**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      paymentmethod: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **payment_methods.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('payment_methods_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **payment_methods.paymentmethod**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      paymentmethod?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'payment_methods_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **pgmigrations**
   * - Table in database
   */
  export namespace pgmigrations {
    export type Table = 'pgmigrations';
    export interface Selectable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: Date;
    }
    export interface JSONSelectable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id: number;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **pgmigrations.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('pgmigrations_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **pgmigrations.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **pgmigrations.run_on**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      run_on?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'pgmigrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **products**
   * - Table in database
   */
  export namespace products {
    export type Table = 'products';
    export interface Selectable {
      /**
      * **products.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **products.categoryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      categoryid: number;
      /**
      * **products.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **products.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **products.attributes**
      * - `attributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes: c.PgAttributes;
      /**
      * **products.baseprice**
      * - `numeric` in database
      * - Nullable, no default
      */
      baseprice: number | null;
      /**
      * **products.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **products.ingredients**
      * - `_varchar` in database
      * - `NOT NULL`, default: `(ARRAY[]::character varying[])::character varying(40)[]`
      */
      ingredients: string[];
      /**
      * **products.avaiability**
      * - `_int4` in database
      * - `NOT NULL`, default: `ARRAY[]::integer[]`
      */
      avaiability: number[];
      /**
      * **products.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **products.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **products.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **products.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **products.categoryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      categoryid: number;
      /**
      * **products.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **products.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **products.attributes**
      * - `attributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes: c.PgAttributes;
      /**
      * **products.baseprice**
      * - `numeric` in database
      * - Nullable, no default
      */
      baseprice: number | null;
      /**
      * **products.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **products.ingredients**
      * - `_varchar` in database
      * - `NOT NULL`, default: `(ARRAY[]::character varying[])::character varying(40)[]`
      */
      ingredients: string[];
      /**
      * **products.avaiability**
      * - `_int4` in database
      * - `NOT NULL`, default: `ARRAY[]::integer[]`
      */
      avaiability: number[];
      /**
      * **products.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **products.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **products.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **products.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.categoryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      categoryid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.attributes**
      * - `attributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes?: c.PgAttributes | db.Parameter<c.PgAttributes> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgAttributes | db.Parameter<c.PgAttributes> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.baseprice**
      * - `numeric` in database
      * - Nullable, no default
      */
      baseprice?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.ingredients**
      * - `_varchar` in database
      * - `NOT NULL`, default: `(ARRAY[]::character varying[])::character varying(40)[]`
      */
      ingredients?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.avaiability**
      * - `_int4` in database
      * - `NOT NULL`, default: `ARRAY[]::integer[]`
      */
      avaiability?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **products.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **products.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **products.categoryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      categoryid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **products.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **products.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **products.attributes**
      * - `attributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes?: c.PgAttributes | db.Parameter<c.PgAttributes> | db.DefaultType | db.SQLFragment;
      /**
      * **products.baseprice**
      * - `numeric` in database
      * - Nullable, no default
      */
      baseprice?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **products.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **products.ingredients**
      * - `_varchar` in database
      * - `NOT NULL`, default: `(ARRAY[]::character varying[])::character varying(40)[]`
      */
      ingredients?: string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment;
      /**
      * **products.avaiability**
      * - `_int4` in database
      * - `NOT NULL`, default: `ARRAY[]::integer[]`
      */
      avaiability?: number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment;
      /**
      * **products.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **products.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **products.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **products.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **products.categoryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      categoryid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **products.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **products.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **products.attributes**
      * - `attributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes?: c.PgAttributes | db.Parameter<c.PgAttributes> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgAttributes | db.Parameter<c.PgAttributes> | db.DefaultType | db.SQLFragment>;
      /**
      * **products.baseprice**
      * - `numeric` in database
      * - Nullable, no default
      */
      baseprice?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **products.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **products.ingredients**
      * - `_varchar` in database
      * - `NOT NULL`, default: `(ARRAY[]::character varying[])::character varying(40)[]`
      */
      ingredients?: string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **products.avaiability**
      * - `_int4` in database
      * - `NOT NULL`, default: `ARRAY[]::integer[]`
      */
      avaiability?: number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.DefaultType | db.SQLFragment>;
      /**
      * **products.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **products.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **products.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **promotions**
   * - Table in database
   */
  export namespace promotions {
    export type Table = 'promotions';
    export interface Selectable {
      /**
      * **promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **promotions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **promotions.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number;
      /**
      * **promotions.duedate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      duedate: Date | null;
      /**
      * **promotions.avaiability**
      * - `_int4` in database
      * - Nullable, no default
      */
      avaiability: number[] | null;
      /**
      * **promotions.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **promotions.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **promotions.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **promotions.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_id_seq'::regclass)`
      */
      id: number;
      /**
      * **promotions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **promotions.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number;
      /**
      * **promotions.duedate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      duedate: db.TimestampTzString | null;
      /**
      * **promotions.avaiability**
      * - `_int4` in database
      * - Nullable, no default
      */
      avaiability: number[] | null;
      /**
      * **promotions.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **promotions.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image: string | null;
      /**
      * **promotions.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **promotions.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.duedate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      duedate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.avaiability**
      * - `_int4` in database
      * - Nullable, no default
      */
      avaiability?: number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number[] | db.Parameter<number[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **promotions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **promotions.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **promotions.duedate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      duedate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **promotions.avaiability**
      * - `_int4` in database
      * - Nullable, no default
      */
      avaiability?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **promotions.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **promotions.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **promotions.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **promotions.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **promotions.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **promotions.totalprice**
      * - `numeric` in database
      * - `NOT NULL`, no default
      */
      totalprice?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **promotions.duedate**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      duedate?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions.avaiability**
      * - `_int4` in database
      * - Nullable, no default
      */
      avaiability?: number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number[] | db.Parameter<number[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions.image**
      * - `varchar` in database
      * - Nullable, no default
      */
      image?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'promotions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **promotions_products**
   * - Table in database
   */
  export namespace promotions_products {
    export type Table = 'promotions_products';
    export interface Selectable {
      /**
      * **promotions_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **promotions_products.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid: number;
      /**
      * **promotions_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
      /**
      * **promotions_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes: c.PgProductAttributes;
    }
    export interface JSONSelectable {
      /**
      * **promotions_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_products_id_seq'::regclass)`
      */
      id: number;
      /**
      * **promotions_products.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid: number;
      /**
      * **promotions_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string;
      /**
      * **promotions_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes: c.PgProductAttributes;
    }
    export interface Whereable {
      /**
      * **promotions_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions_products.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **promotions_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes?: c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **promotions_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **promotions_products.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **promotions_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **promotions_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes?: c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **promotions_products.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('promotions_products_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **promotions_products.promotionid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      promotionid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **promotions_products.productid**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      productid?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **promotions_products.attributes**
      * - `productAttributes` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'"[]"'::jsonb`
      */
      attributes?: c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgProductAttributes | db.Parameter<c.PgProductAttributes> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'promotions_products_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **roles**
   * - Table in database
   */
  export namespace roles {
    export type Table = 'roles';
    export interface Selectable {
      /**
      * **roles.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('roles_id_seq'::regclass)`
      */
      id: number;
      /**
      * **roles.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface JSONSelectable {
      /**
      * **roles.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('roles_id_seq'::regclass)`
      */
      id: number;
      /**
      * **roles.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
    }
    export interface Whereable {
      /**
      * **roles.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('roles_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **roles.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **roles.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('roles_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **roles.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **roles.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('roles_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **roles.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'roles_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **states**
   * - Table in database
   */
  export namespace states {
    export type Table = 'states';
    export interface Selectable {
      /**
      * **states.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('states_id_seq'::regclass)`
      */
      id: number;
      /**
      * **states.statename**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statename: string;
      /**
      * **states.statecode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statecode: string;
      /**
      * **states.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number;
    }
    export interface JSONSelectable {
      /**
      * **states.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('states_id_seq'::regclass)`
      */
      id: number;
      /**
      * **states.statename**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statename: string;
      /**
      * **states.statecode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statecode: string;
      /**
      * **states.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number;
    }
    export interface Whereable {
      /**
      * **states.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('states_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **states.statename**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statename?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **states.statecode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statecode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **states.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **states.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('states_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **states.statename**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statename: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **states.statecode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statecode: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **states.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **states.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('states_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **states.statename**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statename?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **states.statecode**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      statecode?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **states.countryid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      countryid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'states_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **users**
   * - Table in database
   */
  export namespace users {
    export type Table = 'users';
    export interface Selectable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.phonenumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      phonenumber: string;
      /**
      * **users.bussinessname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      bussinessname: string;
      /**
      * **users.cnpj**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cnpj: string;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.ownerfirstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerfirstname: string;
      /**
      * **users.ownermiddlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      ownermiddlename: string | null;
      /**
      * **users.ownerlastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerlastname: string;
      /**
      * **users.ownercpf**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownercpf: string;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.botname**
      * - `varchar` in database
      * - `NOT NULL`, default: `'Walle'::character varying`
      */
      botname: string;
      /**
      * **users.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **users.roleid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      roleid: number;
      /**
      * **users.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **users.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: Date | null;
      /**
      * **users.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string;
      /**
      * **users.phonenumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      phonenumber: string;
      /**
      * **users.bussinessname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      bussinessname: string;
      /**
      * **users.cnpj**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cnpj: string;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **users.ownerfirstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerfirstname: string;
      /**
      * **users.ownermiddlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      ownermiddlename: string | null;
      /**
      * **users.ownerlastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerlastname: string;
      /**
      * **users.ownercpf**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownercpf: string;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **users.botname**
      * - `varchar` in database
      * - `NOT NULL`, default: `'Walle'::character varying`
      */
      botname: string;
      /**
      * **users.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo: string | null;
      /**
      * **users.roleid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      roleid: number;
      /**
      * **users.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive: boolean;
      /**
      * **users.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat: db.TimestampTzString | null;
      /**
      * **users.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.phonenumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      phonenumber?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.bussinessname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      bussinessname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.cnpj**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cnpj?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.ownerfirstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerfirstname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.ownermiddlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      ownermiddlename?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.ownerlastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerlastname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.ownercpf**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownercpf?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.botname**
      * - `varchar` in database
      * - `NOT NULL`, default: `'Walle'::character varying`
      */
      botname?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.roleid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      roleid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **users.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.phonenumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      phonenumber: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.bussinessname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      bussinessname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.cnpj**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cnpj: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.ownerfirstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerfirstname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.ownermiddlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      ownermiddlename?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.ownerlastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerlastname: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.ownercpf**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownercpf: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **users.botname**
      * - `varchar` in database
      * - `NOT NULL`, default: `'Walle'::character varying`
      */
      botname?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **users.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.roleid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      roleid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **users.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **users.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **users.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **users.id**
      * - `uuid` in database
      * - `NOT NULL`, no default
      */
      id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.phonenumber**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      phonenumber?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.bussinessname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      bussinessname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.cnpj**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      cnpj?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.ownerfirstname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerfirstname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.ownermiddlename**
      * - `varchar` in database
      * - Nullable, no default
      */
      ownermiddlename?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.ownerlastname**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownerlastname?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.ownercpf**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      ownercpf?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **users.botname**
      * - `varchar` in database
      * - `NOT NULL`, default: `'Walle'::character varying`
      */
      botname?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.logo**
      * - `varchar` in database
      * - Nullable, no default
      */
      logo?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.roleid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      roleid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **users.isactive**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      isactive?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **users.updatedat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      updatedat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **users.createdat**
      * - `timestamptz` in database
      * - Nullable, default: `now()`
      */
      createdat?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'users_cnpj_key' | 'users_email_key' | 'users_owner_cpf_key' | 'users_phone_number_key' | 'users_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = branches.Table | branches_delivery_types.Table | branches_menus.Table | branches_payment_methods.Table | branches_products.Table | branches_promotions.Table | categories.Table | cities.Table | conditions.Table | countries.Table | coupons.Table | coupons_branches.Table | coupons_conditions.Table | customer_addresses.Table | customers.Table | delivery_types.Table | menus.Table | menus_products.Table | opening_hours.Table | orders.Table | orders_products.Table | payment_methods.Table | pgmigrations.Table | products.Table | promotions.Table | promotions_products.Table | roles.Table | states.Table | users.Table;
  export type Selectable = branches.Selectable | branches_delivery_types.Selectable | branches_menus.Selectable | branches_payment_methods.Selectable | branches_products.Selectable | branches_promotions.Selectable | categories.Selectable | cities.Selectable | conditions.Selectable | countries.Selectable | coupons.Selectable | coupons_branches.Selectable | coupons_conditions.Selectable | customer_addresses.Selectable | customers.Selectable | delivery_types.Selectable | menus.Selectable | menus_products.Selectable | opening_hours.Selectable | orders.Selectable | orders_products.Selectable | payment_methods.Selectable | pgmigrations.Selectable | products.Selectable | promotions.Selectable | promotions_products.Selectable | roles.Selectable | states.Selectable | users.Selectable;
  export type JSONSelectable = branches.JSONSelectable | branches_delivery_types.JSONSelectable | branches_menus.JSONSelectable | branches_payment_methods.JSONSelectable | branches_products.JSONSelectable | branches_promotions.JSONSelectable | categories.JSONSelectable | cities.JSONSelectable | conditions.JSONSelectable | countries.JSONSelectable | coupons.JSONSelectable | coupons_branches.JSONSelectable | coupons_conditions.JSONSelectable | customer_addresses.JSONSelectable | customers.JSONSelectable | delivery_types.JSONSelectable | menus.JSONSelectable | menus_products.JSONSelectable | opening_hours.JSONSelectable | orders.JSONSelectable | orders_products.JSONSelectable | payment_methods.JSONSelectable | pgmigrations.JSONSelectable | products.JSONSelectable | promotions.JSONSelectable | promotions_products.JSONSelectable | roles.JSONSelectable | states.JSONSelectable | users.JSONSelectable;
  export type Whereable = branches.Whereable | branches_delivery_types.Whereable | branches_menus.Whereable | branches_payment_methods.Whereable | branches_products.Whereable | branches_promotions.Whereable | categories.Whereable | cities.Whereable | conditions.Whereable | countries.Whereable | coupons.Whereable | coupons_branches.Whereable | coupons_conditions.Whereable | customer_addresses.Whereable | customers.Whereable | delivery_types.Whereable | menus.Whereable | menus_products.Whereable | opening_hours.Whereable | orders.Whereable | orders_products.Whereable | payment_methods.Whereable | pgmigrations.Whereable | products.Whereable | promotions.Whereable | promotions_products.Whereable | roles.Whereable | states.Whereable | users.Whereable;
  export type Insertable = branches.Insertable | branches_delivery_types.Insertable | branches_menus.Insertable | branches_payment_methods.Insertable | branches_products.Insertable | branches_promotions.Insertable | categories.Insertable | cities.Insertable | conditions.Insertable | countries.Insertable | coupons.Insertable | coupons_branches.Insertable | coupons_conditions.Insertable | customer_addresses.Insertable | customers.Insertable | delivery_types.Insertable | menus.Insertable | menus_products.Insertable | opening_hours.Insertable | orders.Insertable | orders_products.Insertable | payment_methods.Insertable | pgmigrations.Insertable | products.Insertable | promotions.Insertable | promotions_products.Insertable | roles.Insertable | states.Insertable | users.Insertable;
  export type Updatable = branches.Updatable | branches_delivery_types.Updatable | branches_menus.Updatable | branches_payment_methods.Updatable | branches_products.Updatable | branches_promotions.Updatable | categories.Updatable | cities.Updatable | conditions.Updatable | countries.Updatable | coupons.Updatable | coupons_branches.Updatable | coupons_conditions.Updatable | customer_addresses.Updatable | customers.Updatable | delivery_types.Updatable | menus.Updatable | menus_products.Updatable | opening_hours.Updatable | orders.Updatable | orders_products.Updatable | payment_methods.Updatable | pgmigrations.Updatable | products.Updatable | promotions.Updatable | promotions_products.Updatable | roles.Updatable | states.Updatable | users.Updatable;
  export type UniqueIndex = branches.UniqueIndex | branches_delivery_types.UniqueIndex | branches_menus.UniqueIndex | branches_payment_methods.UniqueIndex | branches_products.UniqueIndex | branches_promotions.UniqueIndex | categories.UniqueIndex | cities.UniqueIndex | conditions.UniqueIndex | countries.UniqueIndex | coupons.UniqueIndex | coupons_branches.UniqueIndex | coupons_conditions.UniqueIndex | customer_addresses.UniqueIndex | customers.UniqueIndex | delivery_types.UniqueIndex | menus.UniqueIndex | menus_products.UniqueIndex | opening_hours.UniqueIndex | orders.UniqueIndex | orders_products.UniqueIndex | payment_methods.UniqueIndex | pgmigrations.UniqueIndex | products.UniqueIndex | promotions.UniqueIndex | promotions_products.UniqueIndex | roles.UniqueIndex | states.UniqueIndex | users.UniqueIndex;
  export type Column = branches.Column | branches_delivery_types.Column | branches_menus.Column | branches_payment_methods.Column | branches_products.Column | branches_promotions.Column | categories.Column | cities.Column | conditions.Column | countries.Column | coupons.Column | coupons_branches.Column | coupons_conditions.Column | customer_addresses.Column | customers.Column | delivery_types.Column | menus.Column | menus_products.Column | opening_hours.Column | orders.Column | orders_products.Column | payment_methods.Column | pgmigrations.Column | products.Column | promotions.Column | promotions_products.Column | roles.Column | states.Column | users.Column;
  export type AllBaseTables = [branches.Table, branches_delivery_types.Table, branches_menus.Table, branches_payment_methods.Table, branches_products.Table, branches_promotions.Table, categories.Table, cities.Table, conditions.Table, countries.Table, coupons.Table, coupons_branches.Table, coupons_conditions.Table, customer_addresses.Table, customers.Table, delivery_types.Table, menus.Table, menus_products.Table, opening_hours.Table, orders.Table, orders_products.Table, payment_methods.Table, pgmigrations.Table, products.Table, promotions.Table, promotions_products.Table, roles.Table, states.Table, users.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [branches.Table, branches_delivery_types.Table, branches_menus.Table, branches_payment_methods.Table, branches_products.Table, branches_promotions.Table, categories.Table, cities.Table, conditions.Table, countries.Table, coupons.Table, coupons_branches.Table, coupons_conditions.Table, customer_addresses.Table, customers.Table, delivery_types.Table, menus.Table, menus_products.Table, opening_hours.Table, orders.Table, orders_products.Table, payment_methods.Table, pgmigrations.Table, products.Table, promotions.Table, promotions_products.Table, roles.Table, states.Table, users.Table];


  export type SelectableForTable<T extends Table> = {
    branches: branches.Selectable;
    branches_delivery_types: branches_delivery_types.Selectable;
    branches_menus: branches_menus.Selectable;
    branches_payment_methods: branches_payment_methods.Selectable;
    branches_products: branches_products.Selectable;
    branches_promotions: branches_promotions.Selectable;
    categories: categories.Selectable;
    cities: cities.Selectable;
    conditions: conditions.Selectable;
    countries: countries.Selectable;
    coupons: coupons.Selectable;
    coupons_branches: coupons_branches.Selectable;
    coupons_conditions: coupons_conditions.Selectable;
    customer_addresses: customer_addresses.Selectable;
    customers: customers.Selectable;
    delivery_types: delivery_types.Selectable;
    menus: menus.Selectable;
    menus_products: menus_products.Selectable;
    opening_hours: opening_hours.Selectable;
    orders: orders.Selectable;
    orders_products: orders_products.Selectable;
    payment_methods: payment_methods.Selectable;
    pgmigrations: pgmigrations.Selectable;
    products: products.Selectable;
    promotions: promotions.Selectable;
    promotions_products: promotions_products.Selectable;
    roles: roles.Selectable;
    states: states.Selectable;
    users: users.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    branches: branches.JSONSelectable;
    branches_delivery_types: branches_delivery_types.JSONSelectable;
    branches_menus: branches_menus.JSONSelectable;
    branches_payment_methods: branches_payment_methods.JSONSelectable;
    branches_products: branches_products.JSONSelectable;
    branches_promotions: branches_promotions.JSONSelectable;
    categories: categories.JSONSelectable;
    cities: cities.JSONSelectable;
    conditions: conditions.JSONSelectable;
    countries: countries.JSONSelectable;
    coupons: coupons.JSONSelectable;
    coupons_branches: coupons_branches.JSONSelectable;
    coupons_conditions: coupons_conditions.JSONSelectable;
    customer_addresses: customer_addresses.JSONSelectable;
    customers: customers.JSONSelectable;
    delivery_types: delivery_types.JSONSelectable;
    menus: menus.JSONSelectable;
    menus_products: menus_products.JSONSelectable;
    opening_hours: opening_hours.JSONSelectable;
    orders: orders.JSONSelectable;
    orders_products: orders_products.JSONSelectable;
    payment_methods: payment_methods.JSONSelectable;
    pgmigrations: pgmigrations.JSONSelectable;
    products: products.JSONSelectable;
    promotions: promotions.JSONSelectable;
    promotions_products: promotions_products.JSONSelectable;
    roles: roles.JSONSelectable;
    states: states.JSONSelectable;
    users: users.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    branches: branches.Whereable;
    branches_delivery_types: branches_delivery_types.Whereable;
    branches_menus: branches_menus.Whereable;
    branches_payment_methods: branches_payment_methods.Whereable;
    branches_products: branches_products.Whereable;
    branches_promotions: branches_promotions.Whereable;
    categories: categories.Whereable;
    cities: cities.Whereable;
    conditions: conditions.Whereable;
    countries: countries.Whereable;
    coupons: coupons.Whereable;
    coupons_branches: coupons_branches.Whereable;
    coupons_conditions: coupons_conditions.Whereable;
    customer_addresses: customer_addresses.Whereable;
    customers: customers.Whereable;
    delivery_types: delivery_types.Whereable;
    menus: menus.Whereable;
    menus_products: menus_products.Whereable;
    opening_hours: opening_hours.Whereable;
    orders: orders.Whereable;
    orders_products: orders_products.Whereable;
    payment_methods: payment_methods.Whereable;
    pgmigrations: pgmigrations.Whereable;
    products: products.Whereable;
    promotions: promotions.Whereable;
    promotions_products: promotions_products.Whereable;
    roles: roles.Whereable;
    states: states.Whereable;
    users: users.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    branches: branches.Insertable;
    branches_delivery_types: branches_delivery_types.Insertable;
    branches_menus: branches_menus.Insertable;
    branches_payment_methods: branches_payment_methods.Insertable;
    branches_products: branches_products.Insertable;
    branches_promotions: branches_promotions.Insertable;
    categories: categories.Insertable;
    cities: cities.Insertable;
    conditions: conditions.Insertable;
    countries: countries.Insertable;
    coupons: coupons.Insertable;
    coupons_branches: coupons_branches.Insertable;
    coupons_conditions: coupons_conditions.Insertable;
    customer_addresses: customer_addresses.Insertable;
    customers: customers.Insertable;
    delivery_types: delivery_types.Insertable;
    menus: menus.Insertable;
    menus_products: menus_products.Insertable;
    opening_hours: opening_hours.Insertable;
    orders: orders.Insertable;
    orders_products: orders_products.Insertable;
    payment_methods: payment_methods.Insertable;
    pgmigrations: pgmigrations.Insertable;
    products: products.Insertable;
    promotions: promotions.Insertable;
    promotions_products: promotions_products.Insertable;
    roles: roles.Insertable;
    states: states.Insertable;
    users: users.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    branches: branches.Updatable;
    branches_delivery_types: branches_delivery_types.Updatable;
    branches_menus: branches_menus.Updatable;
    branches_payment_methods: branches_payment_methods.Updatable;
    branches_products: branches_products.Updatable;
    branches_promotions: branches_promotions.Updatable;
    categories: categories.Updatable;
    cities: cities.Updatable;
    conditions: conditions.Updatable;
    countries: countries.Updatable;
    coupons: coupons.Updatable;
    coupons_branches: coupons_branches.Updatable;
    coupons_conditions: coupons_conditions.Updatable;
    customer_addresses: customer_addresses.Updatable;
    customers: customers.Updatable;
    delivery_types: delivery_types.Updatable;
    menus: menus.Updatable;
    menus_products: menus_products.Updatable;
    opening_hours: opening_hours.Updatable;
    orders: orders.Updatable;
    orders_products: orders_products.Updatable;
    payment_methods: payment_methods.Updatable;
    pgmigrations: pgmigrations.Updatable;
    products: products.Updatable;
    promotions: promotions.Updatable;
    promotions_products: promotions_products.Updatable;
    roles: roles.Updatable;
    states: states.Updatable;
    users: users.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    branches: branches.UniqueIndex;
    branches_delivery_types: branches_delivery_types.UniqueIndex;
    branches_menus: branches_menus.UniqueIndex;
    branches_payment_methods: branches_payment_methods.UniqueIndex;
    branches_products: branches_products.UniqueIndex;
    branches_promotions: branches_promotions.UniqueIndex;
    categories: categories.UniqueIndex;
    cities: cities.UniqueIndex;
    conditions: conditions.UniqueIndex;
    countries: countries.UniqueIndex;
    coupons: coupons.UniqueIndex;
    coupons_branches: coupons_branches.UniqueIndex;
    coupons_conditions: coupons_conditions.UniqueIndex;
    customer_addresses: customer_addresses.UniqueIndex;
    customers: customers.UniqueIndex;
    delivery_types: delivery_types.UniqueIndex;
    menus: menus.UniqueIndex;
    menus_products: menus_products.UniqueIndex;
    opening_hours: opening_hours.UniqueIndex;
    orders: orders.UniqueIndex;
    orders_products: orders_products.UniqueIndex;
    payment_methods: payment_methods.UniqueIndex;
    pgmigrations: pgmigrations.UniqueIndex;
    products: products.UniqueIndex;
    promotions: promotions.UniqueIndex;
    promotions_products: promotions_products.UniqueIndex;
    roles: roles.UniqueIndex;
    states: states.UniqueIndex;
    users: users.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    branches: branches.Column;
    branches_delivery_types: branches_delivery_types.Column;
    branches_menus: branches_menus.Column;
    branches_payment_methods: branches_payment_methods.Column;
    branches_products: branches_products.Column;
    branches_promotions: branches_promotions.Column;
    categories: categories.Column;
    cities: cities.Column;
    conditions: conditions.Column;
    countries: countries.Column;
    coupons: coupons.Column;
    coupons_branches: coupons_branches.Column;
    coupons_conditions: coupons_conditions.Column;
    customer_addresses: customer_addresses.Column;
    customers: customers.Column;
    delivery_types: delivery_types.Column;
    menus: menus.Column;
    menus_products: menus_products.Column;
    opening_hours: opening_hours.Column;
    orders: orders.Column;
    orders_products: orders_products.Column;
    payment_methods: payment_methods.Column;
    pgmigrations: pgmigrations.Column;
    products: products.Column;
    promotions: promotions.Column;
    promotions_products: promotions_products.Column;
    roles: roles.Column;
    states: states.Column;
    users: users.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    branches: branches.SQL;
    branches_delivery_types: branches_delivery_types.SQL;
    branches_menus: branches_menus.SQL;
    branches_payment_methods: branches_payment_methods.SQL;
    branches_products: branches_products.SQL;
    branches_promotions: branches_promotions.SQL;
    categories: categories.SQL;
    cities: cities.SQL;
    conditions: conditions.SQL;
    countries: countries.SQL;
    coupons: coupons.SQL;
    coupons_branches: coupons_branches.SQL;
    coupons_conditions: coupons_conditions.SQL;
    customer_addresses: customer_addresses.SQL;
    customers: customers.SQL;
    delivery_types: delivery_types.SQL;
    menus: menus.SQL;
    menus_products: menus_products.SQL;
    opening_hours: opening_hours.SQL;
    orders: orders.SQL;
    orders_products: orders_products.SQL;
    payment_methods: payment_methods.SQL;
    pgmigrations: pgmigrations.SQL;
    products: products.SQL;
    promotions: promotions.SQL;
    promotions_products: promotions_products.SQL;
    roles: roles.SQL;
    states: states.SQL;
    users: users.SQL;
  }[T];

}
